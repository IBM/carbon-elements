/**
 * Copyright IBM Corp. 2015, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const { reporter } = require('@carbon/cli-reporter');
const { paramCase } = require('change-case');
const fs = require('fs-extra');
const path = require('path');
const prettier = require('prettier');
const { colors } = require('../lib');

const SCSS_DIR = path.resolve(__dirname, '../scss');
const COLORS_ENTRYPOINT = path.join(SCSS_DIR, 'colors.scss');
const MIXINS_ENTRYPOINT = path.join(SCSS_DIR, 'mixins.scss');
const GENERATED_COMMENT = '// Code generated by @carbon/colors. DO NOT EDIT.';
const PREFIX = 'ibm';
const prettierOptions = {
  parser: 'scss',
  printWidth: 80,
  singleQuote: true,
};

function assertType(node, type) {
  if (node.type !== type) {
    throw new Error(`Expected node to be of type: ${type}`);
  }
}

async function build() {
  reporter.info('Building scss files for colors...');

  // Colors has the shape:
  // type Colors = {
  //   [string: name]: {
  //     [string: grade]: string,
  //   }
  // };
  //
  // We want to convert this into a flat array of variable descriptors that we
  // can use to create mixins. This flat array will look like:
  // type ColorVariables = Array<{ name: string, value: string }>
  const colorVariables = Object.keys(colors).reduce((acc, key) => {
    const swatch = paramCase(key);
    const values = Object.keys(colors[key]).reduce((acc, grade) => {
      const name = `${swatch}-${grade}`;
      const value = colors[key][grade];
      return acc.concat({
        name,
        value,
      });
    }, []);

    // Create shorthand for swatches of one value
    if (Object.keys(colors[key]).length === 1) {
      const grade = Object.keys(colors[key])[0];
      const value = colors[key][grade];
      return acc.concat(...values, {
        name: swatch,
        value,
      });
    }

    return acc.concat(...values);
  }, []);

  const DEPRECATED_NAMESPACE = `ibm-colors`;
  const deprecated = t.stylesheet([
    t.mixin('ibm-colors', [
      ...colorVariables.map(({ name, value }) =>
        t.variable(
          `${DEPRECATED_NAMESPACE}__${name}`,
          t.color(value),
          true,
          true
        )
      ),
      t.variable('ibm-colors', t.string('bar'), true, true),
      t.variable('ibm-colors-map', t.string('bar'), true, true),
    ]),
  ]);

  console.log(print(deprecated));

  // Create a mixin with content
  // Create a variable with a namespace
  // Continue to support old IDL style variables and mixins for migration
  // Write migration for upgrade and test on carbon-components
}

const t = {
  stylesheet(children) {
    return {
      type: 'stylesheet',
      children,
    };
  },
  mixin(name, children) {
    return {
      type: 'mixin',
      name,
      children,
    };
  },
  variable(name, value, isGlobal, isDefault) {
    return {
      type: 'variable',
      name,
      value,
      global: isGlobal,
      default: isDefault,
    };
  },
  color(value) {
    return {
      type: 'color',
      value,
    };
  },
  string(value) {
    return {
      type: 'string',
      value,
    };
  },
};

function print(root, indentLevel = 0) {
  const indent = ' '.repeat(indentLevel);
  let output = '';

  switch (root.type) {
    case 'stylesheet':
      for (const child of root.children) {
        output += print(child) + '\n';
      }
      break;

    case 'mixin':
      output += `@mixin ${root.name} {`;
      for (let i = 0; i < root.children.length; i++) {
        const child = root.children[i];
        if (i === 0) {
          output += '\n';
        }
        output += print(child, indentLevel + 1) + '\n';
      }
      output += `}`;
      break;

    case 'variable':
      output += `${indent}$${root.name}: ${print(root.value)}`;
      if (root.default) {
        output += ' !default';
      }
      if (root.global) {
        output += ' !global';
      }
      output += ';';
      break;

    case 'color':
      output += `#${root.value}`;
      break;

    case 'string':
      output += `'${root.value}'`;
      break;

    default:
      throw new Error(`Unsupported type: ${root.type}`);
  }

  return output;
}

async function buildz() {
  reporter.info('Building scss files for colors...');

  const colorVariables = Object.keys(colors).reduce((acc, key) => {
    const swatch = paramCase(key);
    const values = Object.keys(colors[key]).reduce((acc, grade) => {
      const name = `${swatch}-${grade}`;
      const value = colors[key][grade];
      return acc.concat(createVariable(`${PREFIX}-colors__${name}`, value));
    }, []);

    // Create shorthand for swatches of one value
    if (Object.keys(colors[key]).length === 1) {
      const grade = Object.keys(colors[key])[0];
      const value = colors[key][grade];
      return acc.concat(
        ...values,
        createVariable(`${PREFIX}-colors__${swatch}`, value)
      );
    }

    return acc.concat(...values);
  }, []);

  const colorMapValues = Object.keys(colors).map(swatch => {
    return {
      swatch,
      value: Object.keys(colors[swatch]).reduce((acc, grade, index) => {
        const property = `${grade}: ${colors[swatch][grade]},`;
        if (index === 0) {
          return property;
        }
        return acc + '\n' + property;
      }, ''),
    };
  });
  const colorMap = `$ibm-colors: (
  ${colorMapValues
    .map(
      ({ swatch, value }) => `'${paramCase(swatch)}': (
  ${value}
),\n`
    )
    .join('\n')}
) !default !global;
// Deprecated, use $ibm-colors
$ibm-color-map: $ibm-colors !default !global;
`;

  const mixins = `${GENERATED_COMMENT}
@mixin ${PREFIX}--colors {
  ${colorMap}
  ${colorVariables.map(variable => '' + variable).join('\n  ')}
}`;

  await fs.ensureDir(SCSS_DIR);
  await fs.writeFile(
    MIXINS_ENTRYPOINT,
    prettier.format(mixins, prettierOptions)
  );

  const colorsFile = `${GENERATED_COMMENT}

@import './mixins';

@include ${PREFIX}--colors();
`;

  await fs.writeFile(
    COLORS_ENTRYPOINT,
    prettier.format(colorsFile, prettierOptions)
  );

  reporter.success('Done! ðŸŽ‰');
}

function createVariable(name, value) {
  const variable = `$${name}`;
  return {
    name: variable,
    unprefixed: name,
    value,
    toString() {
      return `${variable}: ${value} !default !global;`;
    },
  };
}

build().catch(error => {
  console.error(error);
});
