/**
 * Copyright IBM Corp. 2015, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const { reporter } = require('@carbon/cli-reporter');
const { paramCase } = require('change-case');
const fs = require('fs-extra');
const path = require('path');
const prettier = require('prettier');
const { colors } = require('../lib');

const SCSS_DIR = path.resolve(__dirname, '../scss');
const COLORS_ENTRYPOINT = path.join(SCSS_DIR, 'colors.scss');
const MIXINS_ENTRYPOINT = path.join(SCSS_DIR, 'mixins.scss');
const BUNDLE_ENTRYPOINT = path.join(SCSS_DIR, 'bundle.scss');
const GENERATED_COMMENT = '// Code generated by @carbon/colors. DO NOT EDIT.';
const PREFIX = 'ibm';
const prettierOptions = {
  parser: 'scss',
  printWidth: 80,
  singleQuote: true,
};

async function build() {
  reporter.info('Building scss files for colors...');

  const colorVariables = Object.keys(colors).reduce((acc, key) => {
    const swatch = paramCase(key);
    const values = Object.keys(colors[key]).reduce((acc, grade) => {
      const name = `${swatch}-${grade}`;
      const value = colors[key][grade];
      return acc.concat(createVariable(`${PREFIX}-colors__${name}`, value));
    }, []);

    // Create shorthand for swatches of one value
    if (Object.keys(colors[key]).length === 1) {
      const grade = Object.keys(colors[key])[0];
      const value = colors[key][grade];
      return acc.concat(
        ...values,
        createVariable(`${PREFIX}-colors__${swatch}`, value)
      );
    }

    return acc.concat(...values);
  }, []);

  const colorMapValues = Object.keys(colors).map(swatch => {
    return {
      swatch,
      value: Object.keys(colors[swatch]).reduce((acc, grade, index) => {
        const property = `${grade}: ${colors[swatch][grade]},`;
        if (index === 0) {
          return property;
        }
        return acc + '\n' + property;
      }, ''),
    };
  });
  const colorMap = `$ibm-colors: (
  ${colorMapValues
    .map(
      ({ swatch, value }) => `'${paramCase(swatch)}': (
  ${value}
),\n`
    )
    .join('\n')}
) !default !global;
// Deprecated, use $ibm-colors
$ibm-color-map: $ibm-colors !default !global;
`;

  const mixins = `${GENERATED_COMMENT}
@mixin ibm-colors {
  ${colorMap}
  ${colorVariables.map(variable => '' + variable).join('\n  ')}
}`;

  await fs.ensureDir(SCSS_DIR);
  await fs.writeFile(
    MIXINS_ENTRYPOINT,
    prettier.format(mixins, prettierOptions)
  );

  const colorsFile = `${GENERATED_COMMENT}

@import './mixins';

@include ibm-colors();
`;

  await fs.writeFile(
    COLORS_ENTRYPOINT,
    prettier.format(colorsFile, prettierOptions)
  );

  reporter.success('Done! ðŸŽ‰');
}

function createVariable(name, value) {
  const variable = `$${name}`;
  return {
    name: variable,
    unprefixed: name,
    value,
    toString() {
      return `${variable}: ${value} !default !global;`;
    },
  };
}

build().catch(error => {
  console.error(error);
});
