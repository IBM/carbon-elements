/**
 * Copyright IBM Corp. 2015, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const { reporter } = require('@carbon/cli-reporter');
const { paramCase } = require('change-case');
const fs = require('fs-extra');
const path = require('path');
const prettier = require('prettier');
const {
  colors,
  tokens,
  white0,
  black100,
  yellow20,
  orange40,
} = require('../lib');

const SCSS_DIR = path.resolve(__dirname, '../scss');
const COLORS_ENTRYPOINT = path.join(SCSS_DIR, 'colors.scss');
const TOKEN_ENTRYPOINT = path.join(SCSS_DIR, 'tokens.scss');
const MIXINS_ENTRYPOINT = path.join(SCSS_DIR, 'mixins.scss');
const GENERATED_COMMENT = '// Code generated by @carbon/colors. DO NOT EDIT.';
const PREFIX = 'ibm';
const prettierOptions = {
  parser: 'scss',
  printWidth: 80,
  singleQuote: true,
};

const colorsToMap = {
  ...colors,
  black: {
    100: black100,
  },
  orange: {
    40: orange40,
  },
  white: {
    0: white0,
  },
  yellow: {
    20: yellow20,
  },
};

async function build() {
  reporter.info('Building scss files for colors and tokens...');

  const colorVariables = Object.keys(colorsToMap).reduce((acc, key) => {
    const swatch = paramCase(key);
    const values = Object.keys(colorsToMap[key]).reduce((acc, grade) => {
      const name = `${swatch}-${grade}`;
      const value = colorsToMap[key][grade];
      return acc.concat(createVariable(`${PREFIX}-colors__${name}`, value));
    }, []);

    // Create shorthand for swatches of one value
    if (Object.keys(colorsToMap[key]).length === 1) {
      const grade = Object.keys(colorsToMap[key])[0];
      const value = colorsToMap[key][grade];
      return acc.concat(
        ...values,
        createVariable(`${PREFIX}-colors__${swatch}`, value)
      );
    }

    return acc.concat(...values);
  }, []);

  const tokenVariables = Object.keys(tokens).map(key => {
    const token = paramCase(key);
    const [type, grade] = token.split(/(\d+)/g).filter(Boolean);
    const name = grade ? `${type}-${grade}` : type;
    return createVariable(name, tokens[key]);
  });

  const mixins = `${GENERATED_COMMENT}

@mixin color-values {
  ${colorVariables.map(variable => '' + variable).join('\n  ')}
}

@mixin token-values {
  ${tokenVariables.map(variable => '' + variable).join('\n  ')}
}`;

  await fs.ensureDir(SCSS_DIR);
  await fs.writeFile(
    MIXINS_ENTRYPOINT,
    prettier.format(mixins, prettierOptions)
  );

  const tokensFile = `${GENERATED_COMMENT}

@import './mixins';

@include token-values();
`;

  await fs.writeFile(
    TOKEN_ENTRYPOINT,
    prettier.format(tokensFile, prettierOptions)
  );

  const colorsFile = `${GENERATED_COMMENT}

@import './mixins';

@include color-values();
`;

  await fs.writeFile(
    COLORS_ENTRYPOINT,
    prettier.format(colorsFile, prettierOptions)
  );

  reporter.success('Done! ðŸŽ‰');
}

function createVariable(name, value) {
  const variable = `$${name}`;
  return {
    name: variable,
    value,
    toString() {
      return `${variable}: ${value} !default;`;
    },
  };
}

build().catch(error => {
  console.error(error);
});
