'use strict';

const fs = require('fs-extra');
const path = require('path');
const prettier = require('prettier');
const { colors } = require('./');

const PREFIX = 'ibm';
const cssDir = path.resolve(__dirname, '../css');
const scssDir = path.resolve(__dirname, '../scss');
const entryFilenameCSS = path.join(cssDir, 'colors.css');
const entryFilenameSCSS = path.join(scssDir, 'colors.scss');
const generatedComment = `/* Code generated by @carbon/colors. DO NOT EDIT. */`;

async function build() {
  await fs.remove(scssDir);

  const variables = Object.keys(colors).reduce((acc, key) => {
    const parts = getPartsFromString(key).join('-');

    if (colors[key].default) {
      return acc.concat({
        name: `${PREFIX}-colors__${parts}`,
        value: colors[key],
      });
    }

    const grades = Object.keys(colors[key]).map(grade => {
      const name = `${PREFIX}-colors__${parts}--${grade}`;
      const value = colors[key][grade];
      return {
        name,
        value,
      };
    });

    return acc.concat(grades);
  }, []);

  const fileCSS = [
    generatedComment,
    '',
    ':root {',
    ...variables.map(({ name, value }) => {
      return `--${name}: ${value.default};
        --${name}--hover: ${value.hover};
        --${name}--selected: ${value.selected};
        --${name}--active: ${value.active};`;
    }),
    '}',
  ].join('\n');
  const fileSCSS = [
    generatedComment,
    '',
    ...variables.map(({ name, value }) => {
      return `$${name}: ${value.default};
        $${name}--hover: ${value.hover};
        $${name}--selected: ${value.selected};
        $${name}--active: ${value.active};`;
    }),
  ].join('\n');

  await fs.ensureFile(entryFilenameCSS);
  await fs.ensureFile(entryFilenameSCSS);
  await fs.writeFile(
    entryFilenameCSS,
    prettier.format(fileCSS, {
      parser: 'css',
      jsxBracketSameLine: true,
      printWidth: 80,
      singleQuote: true,
      trailingComma: 'es5',
    })
  );
  await fs.writeFile(
    entryFilenameSCSS,
    prettier.format(fileSCSS, {
      parser: 'scss',
      jsxBracketSameLine: true,
      printWidth: 80,
      singleQuote: true,
      trailingComma: 'es5',
    })
  );
}

/**
 * Get the parts of a string, ideally turning a word like warmGray into
 * ['warm', 'gray']
 *
 * @param {string} string
 * @returns {Array<string>}
 */
function getPartsFromString(string) {
  const parts = [];
  let part = '';

  // We're trying to deconstruct words like warmGray into ['warm', 'gray']
  for (let i = 0; i < string.length; i++) {
    const substring = string[i];

    // When we're inside of a word like warmGray and are at the `G`
    if (substring === substring.toUpperCase()) {
      parts.push(part);
      part = substring.toLowerCase();
      continue;
    }

    part += substring;
  }

  if (part.length > 0) {
    parts.push(part);
  }

  return parts;
}

module.exports = build;
