/**
 * Copyright IBM Corp. 2015, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* eslint-disable no-console */
'use strict';

const { reporter } = require('@carbon/cli-reporter');
const { paramCase } = require('change-case');
const fs = require('fs-extra');
const path = require('path');
const prettier = require('prettier');
const { themes } = require('../lib');

const SCSS_DIR = path.resolve(__dirname, '../scss');
const THEMES_ENTRYPOINT = path.join(SCSS_DIR, 'themes.scss');
const MIXINS_ENTRYPOINT = path.join(SCSS_DIR, 'mixins.scss');
const FUNCTIONS_ENTRYPOINT = path.join(SCSS_DIR, 'functions.scss');
const VARIABLES_ENTRYPOINT = path.join(SCSS_DIR, 'variables.scss');
const GENERATED_COMMENT = '// Code generated by @carbon/themes. DO NOT EDIT.';
const NAMESPACE = 'carbon';
const DEFAULT_THEME = 'white';
const prettierOptions = {
  parser: 'scss',
  printWidth: 80,
  singleQuote: true,
};

async function build() {
  reporter.info('Building scss files for themes...');

  const values = Object.keys(themes).map(name => {
    return {
      name,
      variables: Object.keys(themes[name]).map(key => {
        const fullTokenName = paramCase(key);
        const [type, grade] = fullTokenName.split(/(\d+)/g).filter(Boolean);
        const token = grade ? `${type}-${grade}` : type;
        return {
          keyValue: createKeyValue(token, themes[name][key]),
          defaultVariable: createDefaultVariable(token, themes[name][key]),
          overrideVariable: createOverrideVariable(token, themes[name][key]),
        };
      }),
    };
  });

  // Functions
  const functionsFile = `${GENERATED_COMMENT}
@function ${NAMESPACE}--theme-token($key, $theme: $${NAMESPACE}--theme, $themes: $${NAMESPACE}--themes) {
  @if map-get($themes, $theme) {
    @if map-get(map-get($themes, $theme), $key) {
      @return map-get(map-get($themes, $theme), $key);
    }

    @warn "Unknown theme token '#{$key}'.";
    @return null;
  }

  @warn "Unknown theme '#{$theme}'.";
  @return null;
}`;

  await fs.ensureDir(SCSS_DIR);
  await fs.writeFile(
    FUNCTIONS_ENTRYPOINT,
    prettier.format(functionsFile, prettierOptions)
  );

  // Variables
  let variablesFile = `${GENERATED_COMMENT}
$${NAMESPACE}--theme: '${DEFAULT_THEME}' !default !global;

$${NAMESPACE}--themes: (
`;

  for (const { name, variables } of values) {
    variablesFile += `\n  '${name}': (`;
    variables.map(variable => {
      variablesFile += `\n    ${variable.keyValue}`;
    });
    variablesFile += `\n  ),`;
  }

  variablesFile += `\n) !default !global`;

  await fs.ensureDir(SCSS_DIR);
  await fs.writeFile(
    VARIABLES_ENTRYPOINT,
    prettier.format(variablesFile, prettierOptions)
  );

  // Mixins
  let mixinsFile = `${GENERATED_COMMENT}
@import './variables';
@import './functions';

@mixin ${NAMESPACE}--theme($theme: $${NAMESPACE}--theme) {
`;

  values[0].variables.map(variable => {
    mixinsFile += `\n  ${variable.defaultVariable}`;
  });

  mixinsFile += `\n}`;
  mixinsFile += `\n\n@mixin ${NAMESPACE}--theme-overrides($theme: $${NAMESPACE}--theme) {`;

  values[0].variables.map(variable => {
    mixinsFile += `\n  ${variable.overrideVariable}`;
  });

  mixinsFile += `\n}`;

  await fs.ensureDir(SCSS_DIR);
  await fs.writeFile(
    MIXINS_ENTRYPOINT,
    prettier.format(mixinsFile, prettierOptions)
  );

  // Entrypoints
  await Promise.all(
    values.map(async ({ name }) => {
      const entrypointPath = path.join(SCSS_DIR, `${name}.scss`);
      const entrypoint = `${GENERATED_COMMENT}
@import './mixins';

@include ${NAMESPACE}--theme('${name}');`;
      await fs.writeFile(
        entrypointPath,
        prettier.format(entrypoint, prettierOptions)
      );
    })
  );

  // Theme entrypoint
  const theme = `${GENERATED_COMMENT}
@import './mixins';

@include ${NAMESPACE}--theme;`;

  await fs.writeFile(THEMES_ENTRYPOINT, theme);

  reporter.info('Done! âœ¨');
}

function createKeyValue(name, value) {
  return `'${name}': ${value},`;
}

function createDefaultVariable(name) {
  return `$${name}: ${NAMESPACE}--theme-token('${name}', $theme) !default !global;`;
}

function createOverrideVariable(name) {
  return `$${name}: ${NAMESPACE}--theme-token('${name}', $theme) !global;`;
}

build().catch(error => {
  console.error(error);
});
