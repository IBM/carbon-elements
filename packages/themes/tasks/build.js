/**
 * Copyright IBM Corp. 2015, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const { reporter } = require('@carbon/cli-reporter');
const { paramCase } = require('change-case');
const fs = require('fs-extra');
const path = require('path');
const prettier = require('prettier');
const { themes } = require('../lib');

const SCSS_DIR = path.resolve(__dirname, '../scss');
const THEMES_ENTRYPOINT = path.join(SCSS_DIR, 'themes.scss');
const MIXINS_ENTRYPOINT = path.join(SCSS_DIR, 'mixins.scss');
const BUNDLE_ENTRYPOINT = path.join(SCSS_DIR, 'bundle.scss');
const GENERATED_COMMENT = '// Code generated by @carbon/themes. DO NOT EDIT.';
const NAMESPACE = 'carbon';
const DEFAULT_THEME = 'white';
const prettierOptions = {
  parser: 'scss',
  printWidth: 80,
  singleQuote: true,
};

async function build() {
  reporter.info('Building scss files for themes...');

  const values = Object.keys(themes).map(name => {
    return {
      name,
      variables: Object.keys(themes[name]).map(key => {
        const fullTokenName = paramCase(key);
        const [type, grade] = fullTokenName.split(/(\d+)/g).filter(Boolean);
        const token = grade ? `${type}-${grade}` : type;
        return createVariable(token, themes[name][key]);
      }),
    };
  });

  // Mixins
  let mixins = GENERATED_COMMENT + '\n';

  for (const { name, variables } of values) {
    const mixin = `@mixin ${NAMESPACE}--theme-${name} {
  ${variables.map(variable => '' + variable).join('\n  ')}
}`;
    mixins += '\n' + mixin;
  }

  await fs.ensureDir(SCSS_DIR);
  await fs.writeFile(
    MIXINS_ENTRYPOINT,
    prettier.format(mixins, prettierOptions)
  );

  // Entrypoints
  await Promise.all(
    values.map(async ({ name }) => {
      const entrypointPath = path.join(SCSS_DIR, `${name}.scss`);
      const entrypoint = `${GENERATED_COMMENT}
@import './mixins';

@include ${NAMESPACE}--theme-${name}();`;
      await fs.writeFile(
        entrypointPath,
        prettier.format(entrypoint, prettierOptions)
      );
    })
  );

  // Theme entrypoint
  const theme = `${GENERATED_COMMENT}
@import './mixins';

@include ${NAMESPACE}--theme-${DEFAULT_THEME}();`;
  await fs.writeFile(THEMES_ENTRYPOINT, theme);

  reporter.info('Done! âœ¨');
}

function createVariable(name, value) {
  const variable = `$${name}`;
  return {
    name: variable,
    unprefixed: name,
    value,
    toString() {
      return `${variable}: ${value} !default !global;`;
    },
  };
}

build().catch(error => {
  console.error(error);
});
